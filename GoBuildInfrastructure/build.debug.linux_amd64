#!/usr/bin/env bash

#########################################################################################
# FUNCTIONS

# --- debug: Conditional debugging. All commands begin w/ debug.

function debugSet()             { DebugFlag=TRUE; return 0; }
function debugUnset()           { DebugFlag=; return 0; }
function debugExecIfDebug()     { [ ! -z $DebugFlag ] && $*; return 0; }
function debug()                { [ ! -z $DebugFlag ] && err 'DEBUG:' $* 1>&2 ; return 0; }

function verbose()              { [ "$VerboseFlag" = TRUE ] && echo -n $* ; return 0; }
function verbosenl()            { [ "$VerboseFlag" = TRUE ] && echo $* ; return 0; }
function verboseSet()           { VerboseFlag=TRUE; return 0; }

# --- Colour lines. It requires either linux echo or zsh built-in echo

function colBold()      { printf '\e[1m'; return 0; }
function colNormal()    { printf "\e[0m"; return 0; }
function colBlink()     { printf "\e[5m"; return 0; }

# --- Exits

# always show such a message.  If known terminal, print the message
# in reverse video mode. This is the other way, not using escape sequences
function soErr() { err $*; }

function error()        { soErr 'ERROR:' $*; return 0; } # similar to err but with ERROR prefix and reverse colour (curses).
function errorExit()    { EXITCODE=$1 ; shift; error $* 1>&2; exit $EXITCODE; }
function exitIfErr()    { a="$1"; b="$2"; shift; shift; [ "$a" -ne 0 ] && errorExit $b App returned $b $*; }
function err()          { echo $* 1>&2; } # just write to stderr
function err4()          { echo '   ' $* 1>&2; } # just write to stderr
function err8()          { echo '       ' $* 1>&2; } # just write to stderr

# --- Existance checks
function exitIfBinariesNotFound()       { for file in $@; do [ $(command -v "$file") ] || errorExit 253 binary not found: $file; done }
function exitIfPlainFilesNotExisting()  { for file in $*; do [ ! -f $file ] && errorExit 254 'plain file not found:'$file 1>&2; done }
function exitIfFilesNotExisting()       { for file in $*; do [ ! -e $file ] && errorExit 255 'file not found:'$file 1>&2; done }
function exitIfDirsNotExisting()        { for dir in $*; do [ ! -d $dir ] && errorExit 252 "$APP:ERROR:directory not found:"$dir; done }

# --- Temporary file/directory  creation
# -- file creation -- TMP1=$(tempFile); TMP2=$(tempFile) ;;;; trap "rm -f $TMP1 $TMP2" EXIT
# -- directory creation -- TMPDIR=$(tempDir) ;;;;;  trap "rm -fr $TMPDIR;" EXIT
#
function tempFile()                     { mktemp ${TMPDIR:-/tmp/}$_app.XXXXXXXX; }
function tempDir()                      { mktemp -d "${TMPDIR:-/tmp/}$_app.YYYYYYYYY"; }
# realpath as shell, argument either supplied as stdin or as $1

# MAIN ====================================================================

set -e      # exit if error

### CLI parsing

unset _forceMode
while getopts "dfh" o; do
    case "${o}" in
        d)  debugSet
            ;;
        f)  _forceMode=TRUE
            ;;
        *)
            usage
            ;;
    esac
done
shift $((OPTIND-1))

#### check if the command-name is structured in such a way that we can 
#### determine the release-type and target OS and architecture by it.

declare -r numSeparatorsInCmd=2     # elements are separated by a dot; 2 => 3 elements
declare -r numSeparatorsDetected=$(echo $(basename $0) | awk -F"." '{print NF-1}')
[ $numSeparatorsDetected -ne $numSeparatorsInCmd ] && errorExit 1 Wrong command name.

#### detect the parameters from the name of the command.

declare -r _appDir=$(cd $(dirname $0); /bin/pwd)
cd $_appDir/..
declare -r _binDir=${BINDIR:-./build}
declare -r _osDir=$(echo $0 | sed 's/.*\.//')
declare -r _osType=$(echo $_osDir | sed 's/_.*//')
# linux_arm5 introduced as support for CB1. 
# Avoidance of the introduction of a further field to the command name.
declare -r _osArch=$(echo $_osDir | sed 's/.*_//' | sed 's/arm5$/arm/') # cb1 arm5
if [ $(echo $_osDir | sed 's/.*_//') = arm5  ] ; then
    declare -r _goarm='GOARM=5'
fi
declare -r _releaseType=$(basename $0 | cut -d . -f 2)
case $_releaseType in
    debug) declare -r _ldFlags=${LDFLAGS:-}
        ;;
    release) declare -r _ldFlags=${LDFLAGS:-"-ldflags -w -ldflags -s"}
        ;; 
    upx) declare -r _ldFlags=${LDFLAGS:-"-ldflags -w -ldflags -s"}
        declare -r _upx=.upx
        [ ! command -v upx  > /dev/null 2>&1 ] && errorExit 20 upx command not found.
        ;;
    *) errorExit 2 Unsupported release-type:$_releaseType
        ;;
esac

declare -r _outputDir=$_binDir/$_releaseType/$_osDir
declare -r _appName=$(pwd | xargs basename)
[ ! -x $_appDir/version.sh ] && errorExit 3 version.sh script not found.
declare -r _appVersion=$($_appDir/version.sh)

### debug output

debug bindir         $_binDir
debug osdir          $_osDir
debug ostype         $_osType
debug osarch         $_osArch
debug releaseType    $_releaseType
debug ldFlags        $_ldFlags
debug appdir         $_appDir
debug outputDir      $_outputDir
debug appName        $_appName
debug appVersion     $_appVersion
debug goarm          $_goarm
debug upx            $_upx

debug Press ENTER to continue or ctrl-C to exit.
debugExecIfDebug read

#### if required create the output directory and jump into it
[ ! -d ${_outputDir} ] && mkdir -p ${_outputDir}
# cd ${_outputDir}

#### do not overwrite an existing version if not _forceMode is set
[[ -f ${_outputDir}/${_appName}-${_appVersion} && -z ${_forceMode} ]] && errorExit 10 Current version ${_appName}-${_appVersion} already exists. 

echo env GOARCH=${_osArch} GOOS=${_osType} ${_goarm} go build ${_ldFlags} -o ${_outputDir}/${_appName}-${_appVersion}${_upx}
env GOARCH=${_osArch} GOOS=${_osType} ${_goarm} go build ${_ldFlags} -o ${_outputDir}/${_appName}-${_appVersion}${_upx}
[ "$_releaseType" = release -o "$_releaseType" = upx ] && echo stripping binary && strip ${_outputDir}/${_appName}-${_appVersion}${_upx}
[ ! -z ${_upx} ] && echo upx ${_outputDir}/${_appName}-${_appVersion}${_upx} && upx ${_outputDir}/${_appName}-${_appVersion}${_upx}
ln -fs ${_appName}-${_appVersion}${_upx} ${_outputDir}/${_appName}

# EOF
